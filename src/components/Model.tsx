/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, PerspectiveCamera, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type ActionName = "CameraAction";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh;
    Sphere: THREE.Mesh;
    Cone: THREE.Mesh;
    Suzanne: THREE.Mesh;
    Sphere002: THREE.Mesh;
    Sphere001: THREE.Mesh;
  };
  materials: {
    Cube: THREE.MeshStandardMaterial;
    Sphere: THREE.MeshStandardMaterial;
    Cone: THREE.MeshStandardMaterial;
    Suzane: THREE.MeshStandardMaterial;
    Drop: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    "/Models/animation.gltf"
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Camera" position={[5.24, 15.04, 0.01]}>
        <group rotation={[Math.PI / 2, 0, -Math.PI / 2]}>
          <PerspectiveCamera
            makeDefault={false}
            far={1000}
            near={0.1}
            fov={22.9}
            rotation={[-Math.PI / 2, 0, 0]}
          />
        </group>
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube.geometry}
        material={materials.Cube}
        position={[0, 15, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere.geometry}
        material={materials.Sphere}
        position={[-2.7, 9.16, 2.96]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cone.geometry}
        material={materials.Cone}
        position={[2.58, 4.54, -2.85]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Suzanne.geometry}
        material={materials.Suzane}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere002.geometry}
        material={materials.Drop}
        position={[-1.15, 12.9, 0.71]}
        rotation={[Math.PI / 2, 0.17, Math.PI / 2]}
        scale={[0.04, 0.04, 0.04]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere001.geometry}
        material={materials["Material.001"]}
        scale={[100, 100, 100]}
      />
    </group>
  );
}

useGLTF.preload("/Models/animation.gltf");
